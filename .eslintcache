[{"/home/sebastian/dev/txt-mgr/src/index.js":"1","/home/sebastian/dev/txt-mgr/src/App.js":"2","/home/sebastian/dev/txt-mgr/src/Paper.js":"3","/home/sebastian/dev/txt-mgr/src/Terminal.js":"4","/home/sebastian/dev/txt-mgr/src/help.js":"5"},{"size":219,"mtime":1612124024262,"results":"6","hashOfConfig":"7"},{"size":1899,"mtime":1612473164679,"results":"8","hashOfConfig":"7"},{"size":1301,"mtime":1612205108687,"results":"9","hashOfConfig":"7"},{"size":3941,"mtime":1612482677746,"results":"10","hashOfConfig":"7"},{"size":887,"mtime":1612281709894,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"dylckh",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/home/sebastian/dev/txt-mgr/src/index.js",[],["26","27"],"/home/sebastian/dev/txt-mgr/src/App.js",["28"],"import React from 'react'\nimport Paper from './Paper'\nimport Terminal from './Terminal'\nimport md5 from 'md5'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\nconst cookies = new Cookies()\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'terminal',\n      isLoggedIn: false,\n      user: null};\n    this.toggleModes = this.toggleModes.bind(this)\n    this.logIn = this.logIn.bind(this)\n    this.logOut = this.logOut.bind(this)\n\n    this.auth = this.auth.bind(this)\n\n  }\n\n  componentDidMount(){\n   this.auth()\n  }\n\n  logIn = async(resData) =>{\n\n      let expiration = new Date();\n      expiration.setMonth(expiration.getMonth()+1);\n\n      cookies.set('token', resData.token, {\n          path: \"/\",\n          expires: expiration\n      })\n\n      this.auth()\n  }\n  auth(){\n    axios.get('/user/info', {\n      headers: {\n          token: cookies.get('token'),\n      }\n    })\n    .then(res => {\n        this.setState({\n            ...this.state,\n            isLoggedIn: true,\n            user: res.data.name\n          })\n\n    })\n    .catch(error => {\n        this.setState({\n            isLoggedIn: false})\n    })\n  }\n\n\n  toggleModes(){\n    if(this.state.mode === \"paper\"){\n      this.setState({\n        ...this.state ,\n        mode: 'terminal'})\n    }else{\n      this.setState({\n        ...this.state ,\n        mode: 'paper'})\n    }\n  }\n\n  logOut(){\n    this.setState({\n      ...this.state,\n      isLoggedIn: false,\n      user: null\n    })\n    cookies.remove('token', { path: '/' })\n\n  }\n\n  render() {\n\n    return (\n      <>\n        <style>{\"#\"  + this.state.mode + \"{display: block;}\"}</style>\n        <button onClick={this.toggleModes}>Mode</button>\n          <Paper /> \n          <Terminal logIn={this.logIn} logOut={this.logOut} user={this.state.user} isLoggedIn={this.state.isLoggedIn}/>\n      </>\n    )\n  }\n}","/home/sebastian/dev/txt-mgr/src/Paper.js",[],"/home/sebastian/dev/txt-mgr/src/Terminal.js",["29","30"],"import React from 'react'\nimport axios from 'axios'\n\nexport default class Terminal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dir: \"/\",\n            log: [],\n            query: \"\",\n            task: \"no\"\n        };\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleLog = this.handleLog.bind(this)\n        this.printMsg = this.printMsg.bind(this)\n\n    }\n\n    componentDidMount(){\n\n        let msg\n\n        if(this.props.isLoggedIn){\n            msg = (<> You're logged in as {this.props.user}.  </>)\n        }else{\n            msg = (<> You can <strong>login</strong> or <strong>register</strong> an account.</>)\n        }\n\n\n        this.setState({\n            ...this.state,\n            log:\n            [\n                <>\n                    Welcome to <label className=\"dir\">TxtMgr</label>  <br />\n                    {msg}\n                </>\n            ]\n        })\n    }\n\n    handleSubmit(e){\n\n        e.preventDefault();\n        this.handleLog();\n        let clear = false\n\n        const body = {\n            query: this.state.query,\n            user: this.state.user,\n            dir: this.state.dir \n        }\n\n        switch(this.state.query){\n            case \"\":\n                break\n\n            case \"clear\":\n                clear = true\n                break\n\n            case \"logout\":\n                this.props.logOut()\n                break\n            \n            default:\n                axios.post('/cmd',body)\n                .then( res => {\n                    this.printMsg(res.data.msg)\n                    switch (res.data.task) {\n                        case \"login\":\n                            this.props.logIn(res.data)\n                            break;\n                            \n                    \n                        default:\n                            break;\n                    }\n                })\n        }\n        let newLog = clear ? [] : this.state.log   // if clear is activated it resets the log\n\n        this.setState({\n            ...this.state,\n            query: \"\",\n            log: newLog\n        })\n    }\n\n\n    handleLog(){\n\n        let prompt = (  \n            <>                             \n            <label className=\"user\">{this.props.user}</label>\n            <label className=\"dir\">{this.state.dir}</label>\n            {\"$ \" + \" \"}\n            </>)\n\n        let SubmitedLine = (<div>{prompt}{this.state.query} </div>)\n\n        let newLog = this.state.log\n        newLog.push(SubmitedLine)\n\n\n        this.setState({\n            ...this.state,\n            log: newLog\n        })\n    }\n\n    printMsg(msg){\n        let newLog = this.state.log\n        newLog.push(<> {msg}</>)\n\n        console.log(msg)\n        this.setState({\n            ...this.state,\n            log: newLog\n        })\n    }\n\n    \n    handleChange(event){\n\n        this.setState({\n            ...this.state,\n            query: event.target.value,\n        })\n    }\n    \n    render(){\n\n        let prompt = (  \n            <>                             \n            <label className=\"user\">{this.props.user}</label>\n            <label className=\"dir\">{this.state.dir}</label>\n            {\"$ \" + \" \"}\n            </>)\n\n        return(\n\n            \n            <div id=\"terminal\" onClick={() => document.getElementById(\"cmdIn\").focus()}>\n                <div className=\"terminal-container\">\n\n                    <form onSubmit={this.handleSubmit}>\n\n                        {this.state.log.map(line => line)}\n\n                        <div className=\"terminal-input\">\n                            {prompt}\n                            <input type=\"text\" id=\"cmdIn\" value={this.state.query} onChange={this.handleChange} autocomplete=\"off\" />\n                        </div>\n\n                    </form>\n                </div>\n            </div>\n\n        )\n    }\n}","/home/sebastian/dev/txt-mgr/src/help.js",[],["31","32"],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":4,"column":8,"nodeType":"39","messageId":"40","endLine":4,"endColumn":11},{"ruleId":"41","severity":1,"message":"42","line":98,"column":19,"nodeType":"43","messageId":"44","endLine":98,"endColumn":20},{"ruleId":"41","severity":1,"message":"42","line":139,"column":19,"nodeType":"43","messageId":"44","endLine":139,"endColumn":20},{"ruleId":"33","replacedBy":"45"},{"ruleId":"35","replacedBy":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'md5' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["47"],["48"],"no-global-assign","no-unsafe-negation"]